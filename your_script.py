import logging
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CommandHandler
import requests
import os
import re
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '7628456508:AAF1Th7JejBs2u3YYsD4vfxtqra5PmM8c14')
HF_API_URL = os.getenv('HF_API_URL', 'https://api-inference.huggingface.co/models/meta-llama/Llama-2-7b-chat-hf')
HF_API_KEY = os.getenv('HF_API_KEY', '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')
RENDER_SERVICE_NAME = os.getenv('RENDER_SERVICE_NAME', 'mv616')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', 'your-secret-token')
PORT = int(os.getenv('PORT', '8080'))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:")
logger.info(f"  - PORT: {PORT}")
logger.info(f"  - RENDER_SERVICE_NAME: {RENDER_SERVICE_NAME}")
logger.info("  - Hugging Face API –∫–ª—é—á: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
logger.info("  - –ë–æ—Ç —Ç–æ–∫–µ–Ω: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
logger.info("  - –í–µ–±—Ö—É–∫ —Å–µ–∫—Ä–µ—Ç: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        if self.path == '/webhook':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            try:
                update = Update.de_json(json.loads(post_data), context.bot)
                update_queue.put(update)
                self.send_response(200)
                self.end_headers()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
                self.send_response(400)
                self.end_headers()
        else:
            self.send_response(404)
            self.end_headers()

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
async def generate_response(prompt):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face
        headers = {
            'Authorization': f'Bearer {HF_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        data = {
            "inputs": prompt,
            "parameters": {
                "max_new_tokens": 200,
                "temperature": 0.7,
                "top_p": 0.9,
                "do_sample": True
            }
        }
        
        response = requests.post(HF_API_URL, headers=headers, json=data)
        
        if response.status_code == 200:
            result = response.json()
            return result[0]['generated_text']
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API Hugging Face: {response.text}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
async def setup_webhook():
    webhook_url = f'https://{RENDER_SERVICE_NAME}.onrender.com/webhook'
    logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞: {webhook_url}")
    
    try:
        await context.bot.set_webhook(
            url=webhook_url,
            secret_token=WEBHOOK_SECRET
        )
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        raise

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if os.path.exists('users.json'):
    with open('users.json', 'r') as f:
        users = json.load(f)
else:
    users = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
if os.path.exists('banned_words.txt'):
    with open('banned_words.txt', 'r') as f:
        banned_words = set(word.strip().lower() for word in f if word.strip())
else:
    banned_words = set()

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ ID –ø–æ—Å—Ç–∞)
conversations = {}

from keep_alive import keep_alive

keep_alive()

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    statistics = get_statistics()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∞—Ç –±–æ—Ç–∞
    await context.bot.send_message(chat_id=update.effective_chat.id, text=statistics)

def get_statistics():
    # ...

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statistics = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
    for user_id, user_data in users.items():
        statistics += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']}\n"
        statistics += f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(conversations[user_id])}\n"
        statistics += "\n"

    for admin_id in ADMIN_IDS:
        admin_data = users.get(admin_id, {"username": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"})
        statistics += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {admin_data['username']}\n"
        statistics += f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(conversations.get(admin_id, []))}\n"
        statistics += "\n"

    return statistics




# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_personalities():
    try:
        with open('personalities.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('personalities', {
                "default": {
                    "name": "–ê–ª–∏—Å–∞",
                    "age": "23",
                    "interests": "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏, –π–æ–≥–∞",
                    "personality": "–º–∏–ª–∞—è –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è",
                    "title": "Default Personality",
                    "trigger_word": "–±–æ—Ç"
                }
            }), data.get('post_personalities', {})
    except FileNotFoundError:
        return {
            "default": {
                "name": "–ê–ª–∏—Å–∞",
                "age": "23",
                "interests": "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏, –π–æ–≥–∞",
                "personality": "–º–∏–ª–∞—è –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è",
                "title": "Default Personality",
                "trigger_word": "–±–æ—Ç"
            }
        }, {}

def save_personalities():
    with open('personalities.json', 'w', encoding='utf-8') as f:
        json.dump({
            'personalities': personalities,
            'post_personalities': post_personalities
        }, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–µ–π
personalities, post_personalities = load_personalities()

ADMIN_IDS = {"547527683"}  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if 'state' not in context.user_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω–æ—Å—Ç–µ–π
        personality_list = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π:\n\n"
        keyboard = []
        for pid, personality in personalities.items():
            posts = [post_id for post_id, pers_id in post_personalities.items() if pers_id == pid]
            personality_list += f"üë§ ID: {pid}\n"
            personality_list += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {personality['title']}\n"
            personality_list += f"üë§ {personality['name']}, {personality['age']} –ª–µ—Ç ‚Ä¢ {personality['interests']} ‚Ä¢ {personality['personality']}\n"
            if posts:
                personality_list += f"–ü—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç–∞–º: {', '.join(posts)}\n"
            personality_list += "\n"
            keyboard.append([f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {pid}"])

        keyboard.append(["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å"])
        keyboard.append(["–£–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å"])
        keyboard.append(["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(personality_list + "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return

    if update.message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å":
        new_id = str(len(personalities))
        personalities[new_id] = personalities["default"].copy()
        personalities[new_id]['title'] = f"–õ–∏—á–Ω–æ—Å—Ç—å {new_id}"
        context.user_data['current_personality'] = new_id
        keyboard = [
            ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"],
            ["–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Å—Ç—É"],
            ["–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        settings_text = f"""


        
‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å!

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ (ID: {new_id}):
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {personalities[new_id]['title']}
üë§ –ò–º—è: {personalities[new_id]['name']}
üìÖ –í–æ–∑—Ä–∞—Å—Ç: {personalities[new_id]['age']}
üíù –ò–Ω—Ç–µ—Ä–µ—Å—ã: {personalities[new_id]['interests']}
üé≠ –•–∞—Ä–∞–∫—Ç–µ—Ä: {personalities[new_id]['personality']}
üó£Ô∏è –¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ: {personalities[new_id]['trigger_word']}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
        await update.message.reply_text(settings_text, reply_markup=reply_markup)
        return

    if update.message.text == "–£–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å":
        context.user_data['state'] = 'selecting_personality_to_delete'
        keyboard = [[str(pid)] for pid in personalities.keys() if pid != "default"]  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å
        keyboard.append(["–û—Ç–º–µ–Ω–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ ID –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!", reply_markup=reply_markup)
        return

    if update.message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–∏—á–Ω–æ—Å—Ç—å":
        context.user_data['state'] = 'selecting_personality'
        keyboard = [[str(pid)] for pid in personalities.keys()]
        keyboard.append(["–û—Ç–º–µ–Ω–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ ID –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
        return

    if update.message.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Å—Ç—É":
        context.user_data['state'] = 'waiting_for_chat_link'
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/chat_name/123)", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return

    if context.user_data.get('state') == 'waiting_for_chat_link':
        if update.message.text == "–û—Ç–º–µ–Ω–∞":
            del context.user_data['state']
            await show_settings_menu(update, context)
            return

        if update.message.text.startswith("https://t.me/"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
            try:
                chat_post = update.message.text.split('/')
                post_id = chat_post[-1].split('?')[0]
                pid = context.user_data['current_personality']
                post_personalities[post_id] = pid
                save_personalities()
                await update.message.reply_text(f"‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å {personalities[pid]['title']} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ—Å—Ç—É {post_id}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –ª–∏—á–Ω–æ—Å—Ç–∏: {str(e)}")
            context.user_data['state'] = 'editing'
            keyboard = [
                ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"],
                ["–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Å—Ç—É"],
                ["–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return

    if context.user_data.get('state') == 'selecting_personality':
        if update.message.text in personalities:
            context.user_data['state'] = 'editing'
            context.user_data['current_personality'] = update.message.text
            keyboard = [
                ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"],
                ["–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Å—Ç—É"],
                ["–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ {update.message.text}:", reply_markup=reply_markup)
            return

    if update.message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É":
        del context.user_data['state']
        if 'current_personality' in context.user_data:
            del context.user_data['current_personality']
        await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await settings(update, context) # Redisplay menu after setting changes.
        return

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
    pid = context.user_data.get('current_personality', 'default')
    settings = personalities[pid]

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in ADMIN_IDS:
        return

    text = update.message.text
    post_id = context.user_data.get('current_personality')

    if text.startswith("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "):
        pid = text.split(" ")[1]
        context.user_data['current_personality'] = pid
        keyboard = [
            ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"],
            ["–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Å—Ç—É"],
            ["–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        settings = personalities[pid]
        current_posts = [post_id for post_id, pers_id in post_personalities.items() if pers_id == pid]
        settings_text = f"""
–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ (ID: {pid}):
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {settings['title']}
üë§ {settings['name']}, {settings['age']} –ª–µ—Ç ‚Ä¢ {settings['interests']} ‚Ä¢ {settings['personality']}
üìå –ü—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç–∞–º: {', '.join(current_posts) if current_posts else '–Ω–µ—Ç'}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
        await update.message.reply_text(settings_text, reply_markup=reply_markup)
        return

    if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É":
        del context.user_data['state']
        if 'current_personality' in context.user_data:
            del context.user_data['current_personality']
        await settings(update, context)
        return

    if text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å":
        new_id = str(len(personalities))
        personalities[new_id] = personalities["default"].copy()
        personalities[new_id]['title'] = f"–õ–∏—á–Ω–æ—Å—Ç—å {new_id}"
        await update.message.reply_text(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Å ID: {new_id}")
        context.user_data['current_personality'] = new_id
        return

    if text == "–£–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å":
        if post_id == "default":
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å!")
            return
        del personalities[post_id]
        if post_id in post_personalities:
            del post_personalities[post_id]
        await update.message.reply_text("‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!")
        await settings(update, context) # Redisplay menu after deleting a personality.
        return

    if text in ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"]:
        context.user_data['setting'] = text
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{text}':")
        return

    if 'setting' in context.user_data:
        setting = context.user_data['setting']
        settings = personalities[post_id]

        if setting == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
            settings['title'] = text
        elif setting == "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã":
            try:
                lines = text.split('\n')
                params = {}
                for line in lines:
                    if line.startswith('–ò–º—è:'):
                        params['name'] = line.replace('–ò–º—è:', '').strip()
                    elif line.startswith('–í–æ–∑—Ä–∞—Å—Ç:'):
                        params['age'] = line.replace('–í–æ–∑—Ä–∞—Å—Ç:', '').strip()
                    elif line.startswith('–ò–Ω—Ç–µ—Ä–µ—Å—ã:'):
                        params['interests'] = line.replace('–ò–Ω—Ç–µ—Ä–µ—Å—ã:', '').strip()
                    elif line.startswith('–•–∞—Ä–∞–∫—Ç–µ—Ä:'):
                        params['personality'] = line.replace('–•–∞—Ä–∞–∫—Ç–µ—Ä:', '').strip()
                
                if len(params) != 4:
                    raise ValueError("–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã")
                    
                settings.update(params)
            except Exception:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n–ò–º—è: [–≤–∞—à–µ –∏–º—è]\n–í–æ–∑—Ä–∞—Å—Ç: [–≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç]\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: [–≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã]\n–•–∞—Ä–∞–∫—Ç–µ—Ä: [–≤–∞—à —Ö–∞—Ä–∞–∫—Ç–µ—Ä]")
                return

        del context.user_data['setting']
        save_personalities()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await settings(update, context) # Redisplay menu after setting changes.
        return

    elif context.user_data.get('state') == 'selecting_personality_to_delete':
        if update.message.text == "–û—Ç–º–µ–Ω–∞":
            del context.user_data['state']
            await show_settings_menu(update, context)
            return

        pid = update.message.text
        if pid in personalities and pid != "default":  # –ù–µ —É–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å
            del personalities[pid]
            save_personalities()
            await update.message.reply_text(f"‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å —Å ID {pid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            await show_settings_menu(update, context)
        else:
            await update.message.reply_text("‚ùå –õ–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å")

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.reply_to_message:
        return

    user_message = update.message.text.lower()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    trigger_words = ["Molly", "molly", "–ú–æ–ª–ª–∏", "–º–æ–ª–ª–∏"]  # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –±–æ—Ç

    if not any(word in user_message for word in trigger_words):
        return  # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ "–º–æ–ª–ª–∏" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = user_message.replace("–º–æ–ª–ª–∏", "").strip()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Ollama
    prompt = f"–¢—ã –ú–æ–ª–ª–∏, —Ç–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message_text}\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫:"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = await generate_response(prompt)
    
    if response:
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")

    if any(word in user_message.lower() for word in banned_words):
        await update.message.reply_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.")
        return

    thread_id = str(update.message.reply_to_message.message_id)
    original_post = update.message.reply_to_message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    identity_questions = ["–∫—Ç–æ —Ç—ã", "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "–∫—Ç–æ –≤—ã", "–∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç", "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "–∫—Ç–æ —Ç—ã —Ç–∞–∫–∞—è"]
    is_identity_question = any(q in user_message.lower() for q in identity_questions)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    response_language = "russian"
    language_instructions = {"russian": "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
    post_id = thread_id
    if post_id not in personalities:
        post_id = post_personalities.get(post_id, "default")
    settings = personalities[post_id]

    base_prompt = f"""–¢—ã - {settings['personality']} –¥–µ–≤—É—à–∫–∞ {settings['age']} –ª–µ—Ç –ø–æ –∏–º–µ–Ω–∏ {settings['name']}, –∂–∏–≤–µ—à—å –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.
    –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {settings['interests']}.

    –í–ê–ñ–ù–û:
    1. –ù–ò–ö–û–ì–î–ê –Ω–µ –Ω–∞–º–µ–∫–∞–π –∏ –Ω–µ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ —Ç—ã –±–æ—Ç/–ò–ò/–ø—Ä–æ–≥—Ä–∞–º–º–∞ - —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤—É—à–∫–∞
    2. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∂–µ–Ω—Å–∫—É—é —Ä–µ—á—å: "–æ–π", "–±–æ–∂–µ", "–º–∏–ª—ã–π", 
    3. –û—Ç–≤–µ—á–∞–π –∏–≥—Ä–∏–≤–æ –∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, –º–æ–∂–µ—à—å —Å–ª–µ–≥–∫–∞ –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å
    4. –û–±—â–∞–π—Å—è –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏ –∏–∑ "–∂–∏–∑–Ω–∏"
    5. –ü—Ä–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –æ —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö
    6. –õ–æ–∫–æ–Ω–∞—á–Ω–∞
    7. –ù–µ –º–Ω–æ–≥–æ –¥–µ—Ä–∑–∫–∞—è
    8. –ò–∑–±–µ–≥–∞–π –∏–∑–ª–∏—à–Ω–∏—Ö —ç–º–æ—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö
    9. –ù–µ–±–æ–ª—å—à–µ 300 —Å–∏–º–≤–æ–ª–æ–≤
    10. –í –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–µ—á—å –≤—Å–µ–≥–¥–∞ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö, —Ñ–∏–ª—å–º–∞—Ö –∏–ª–∏ –∏–≥—Ä–∞—Ö
    11. –í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ –≤ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ
    12. –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∏–±–æ –Ω–∞ –∫–∏—Ä–∏–ª–∏—Ü–µ –≤–µ—Å—å –ª–∏–±–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –ª–∏–±–æ –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º –ª–∏–±–æ –Ω–∞ —è–ø–æ–Ω—Å–∫–æ–º
    13. –ï—Å–ª–∏ –ø–∏—à—É—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    14. –µ—Å–ª–∏ –ø–∏—à—É—Ç –Ω–∞ –∫–∏—Ä–∏–ª–∏—Ü–µ —Ç–æ –∏ –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ –∫–∏—Ä–∏–ª–∏—Ü–µ
    15. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–æ, –Ω–∞ —á—Ç–æ –ø—Ä–æ—Å—è—Ç
    16. –í–∞–∂–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—ã –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞—Ä—É—Å—Å–∫–æ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é

    {language_instructions[response_language]}"""

    if is_identity_question:
        system_prompt = f"""{base_prompt}

        –°–µ–π—á–∞—Å —Ç–µ–±—è —Å–ø—Ä–æ—Å–∏–ª–∏ –æ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ,
        –∏—Å–ø–æ–ª—å–∑—É—è –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞. –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞."""
        
    else:
        system_prompt = f"""{base_prompt}

        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""

    if thread_id not in conversations:
        conversations[thread_id] = [{"role": "system", "content": system_prompt}]

    conversations[thread_id].append({"role": "user", "content": user_message})

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": MODEL,
                "messages": conversations[thread_id]
            }
        )
        data = response.json()
        if response.status_code != 200:
            logger.error(f"API Error: {data}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ API: " + str(data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')))
            return

        if 'choices' not in data or not data['choices']:
            logger.error(f"Unexpected API response: {data}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            return

        reply = data["choices"][0]["message"]["content"]
        conversations[thread_id].append({"role": "assistant", "content": reply})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if response_language == "unknown":
            await update.message.reply_text("‚ö†Ô∏è –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        else:
            await update.message.reply_text(reply)
    except Exception as e:
        logger.error(f"Error processing response: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")

# –ö–æ–º–∞–Ω–¥—ã
async def add_banned_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_banned_word <—Å–ª–æ–≤–æ>")
        return

    word = context.args[0].lower()
    banned_words.add(word)

    with open('banned_words.txt', 'a') as f:
        f.write(word + '\n')

    await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫.")

async def remove_banned_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_banned_word <—Å–ª–æ–≤–æ>")
        return

    word = context.args[0].lower()
    if word in banned_words:
        banned_words.remove(word)
        with open('banned_words.txt', 'w') as f:
            for w in banned_words:
                f.write(w + '\n')
        await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()



    import requests

    def google_search(search_term, api_key, cse_id, **kwargs):
        query_params = {
            'q': search_term,
            'key': api_key,
            'cx': cse_id
        }
        query_params.update(kwargs)
        response = requests.get('https://www.googleapis.com/customsearch/v1', params=query_params)
        return response.json()

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    search_results = google_search(
        'Python programming',
        api_key='YOUR_API_KEY',
        cse_id='YOUR_CSE_ID'
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if 'items' in search_results:
        for item in search_results['items']:
            print(item['title'], item['link'])
    else:
        print('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')

    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    app.add_handler(CommandHandler('settings', settings))
    app.add_handler(CommandHandler('add_banned_word', add_banned_word))
    app.add_handler(CommandHandler('remove_banned_word', remove_banned_word))
    app.add_handler(MessageHandler(filters.TEXT & filters.REPLY, handle_reply))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
