import logging
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters, CommandHandler
import requests
import os
import re
import sys
from http.server import HTTPServer, BaseHTTPRequestHandler
import urllib.parse
import hmac
import hashlib
from googleapiclient.discovery import build

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = "7628456508:AAF1Th7JejBs2u3YYsD4vfxtqra5PmM8c14"
RENDER_SERVICE_NAME = "mv616"
WEBHOOK_SECRET = "NZpMVnfpTym3jfpzJ8A6f8axlRSukKnFNLOabTmOIfU"
GOOGLE_CLIENT_ID = "299175279064-nh9d7r0h57kj4r2cpsidrrd6in5trafn.apps.googleusercontent.com"
GOOGLE_CSE_ID = "34da120c8e7b34c06"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_PATH = f"/{WEBHOOK_SECRET}/"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
REQUIRED_VARS = ['BOT_TOKEN', 'RENDER_SERVICE_NAME', 'WEBHOOK_SECRET']
missing_vars = [var for var in REQUIRED_VARS if not globals()[var]]
if missing_vars:
    raise ValueError(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google API
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –∫–ª—é—á
if GOOGLE_API_KEY:
    logger.info("‚úÖ Google API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω")
else:
    logger.warning("‚ö†Ô∏è Google API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–∞
PORT = int(os.getenv('PORT', '8080'))
logger.info(f"‚úÖ –ü–æ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {PORT}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
RENDER_SERVICE_NAME = os.getenv('RENDER_SERVICE_NAME')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', 'default_secret')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_PATH = f"/{WEBHOOK_SECRET}/"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    keyboard = [
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
        ['üîç –ü–æ–∏—Å–∫'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ú–æ–ª–ª–∏. –ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.',
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = [
        ['üîÑ –°–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å'],
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏'],
        ['üîô –ù–∞–∑–∞–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not update.message or not update.message.text:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        if text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            await handle_settings(update, context)
        elif text == 'üîç –ü–æ–∏—Å–∫':
            await handle_search(update, context)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            await handle_stats(update, context)
        elif text == 'üîÑ –°–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å':
            await handle_change_personality(update, context)
        elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏':
            await handle_personalization(update, context)
        elif text == 'üîô –ù–∞–∑–∞–¥':
            await handle_back(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –ú–æ–ª–ª–∏
        elif "–º–æ–ª–ª–∏" in text.lower():
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ª–æ–≤–∞ "–º–æ–ª–ª–∏"
            message_text = text.lower().replace("–º–æ–ª–ª–∏", "").strip()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
            prompt = f"–¢—ã –ú–æ–ª–ª–∏, —Ç–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message_text}\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫:"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await generate_response(prompt)
            
            if response:
                await update.message.reply_text(response)
            else:
                await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Google
async def google_search(query, context):
    try:
        if not GOOGLE_API_KEY:
            logger.warning("‚ö†Ô∏è Google API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return []

        service = build('customsearch', 'v1', developerKey=GOOGLE_API_KEY)
        result = service.cse().list(
            q=query,
            cx=GOOGLE_CSE_ID,
            num=5
        ).execute()
        
        if 'items' in result:
            return result['items']
        return []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Google: {str(e)}")
        return []
        return []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/add_banned_word - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "/remove_banned_word - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ\n"
    )

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
RENDER_SERVICE_NAME = os.getenv('RENDER_SERVICE_NAME')
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', 'default_secret')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_PATH = f"/{WEBHOOK_SECRET}/"

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        if not self.path.startswith(WEBHOOK_PATH):
            self.send_response(404)
            self.end_headers()
            return

        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        
        try:
            update = Update.de_json(json.loads(post_data), application.bot)
            application.process_update(update)
            self.send_response(200)
            self.end_headers()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
            self.send_response(500)
            self.end_headers()

    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ['BOT_TOKEN', 'OPENROUTER_API_KEY', 'RENDER_SERVICE_NAME', 'WEBHOOK_SECRET']
missing_vars = [var for var in required_env_vars if not os.getenv(var)]

if missing_vars:
    logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
    logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
else:
    logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

# Load environment variables
BOT_TOKEN = os.getenv('BOT_TOKEN', '7628456508:AAF1Th7JejBs2u3YYsD4vfxtqra5PmM8c14')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', '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')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
GOOGLE_CSE_ID = os.getenv('GOOGLE_CSE_ID', '34da120c8e7b34c06')
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID', '299175279064-nh9d7r0h57kj4r2cpsidrrd6in5trafn.apps.googleusercontent.com')
MODEL = 'mistralai/mixtral-8x7b-instruct'
ADMIN_IDS = set(os.getenv('ADMIN_IDS', '547527683').split(','))
WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', 'NZpMVnfpTym3jfpzJ8A6f8axlRSukKnFNLOabTmOIfU')
RENDER_SERVICE_NAME = os.getenv('RENDER_SERVICE_NAME', 'mv616')
PORT = int(os.getenv('PORT', '8080'))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:")
logger.info(f"  - PORT: {PORT}")
logger.info(f"  - RENDER_SERVICE_NAME: {RENDER_SERVICE_NAME}")
logger.info(f"  - ADMIN_IDS: {ADMIN_IDS}")
logger.info("  - OpenRouter API –∫–ª—é—á: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
logger.info("  - –ë–æ—Ç —Ç–æ–∫–µ–Ω: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
logger.info(f"  - Google API –∫–ª—é—á: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if GOOGLE_API_KEY else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
logger.info(f"  - Google CSE ID: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if GOOGLE_CSE_ID else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
logger.info(f"  - Google Client ID: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if GOOGLE_CLIENT_ID else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
logger.info(f"  - –í–µ–±—Ö—É–∫ —Å–µ–∫—Ä–µ—Ç: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if WEBHOOK_SECRET else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
logger.info("  - –ú–æ–¥–µ–ª—å: " + MODEL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_PATH = f"/{WEBHOOK_SECRET}/"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if os.path.exists('users.json'):
    with open('users.json', 'r') as f:
        users = json.load(f)
else:
    users = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
if os.path.exists('banned_words.txt'):
    with open('banned_words.txt', 'r') as f:
        banned_words = set(word.strip().lower() for word in f if word.strip())
else:
    banned_words = set()

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ ID –ø–æ—Å—Ç–∞)
conversations = {}



async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    statistics = get_statistics()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∞—Ç –±–æ—Ç–∞
    await context.bot.send_message(chat_id=update.effective_chat.id, text=statistics)

def get_statistics():
    # ...

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statistics = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
    for user_id, user_data in users.items():
        statistics += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['username']}\n"
        statistics += f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(conversations[user_id])}\n"
        statistics += "\n"

    for admin_id in ADMIN_IDS:
        admin_data = users.get(admin_id, {"username": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"})
        statistics += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {admin_data['username']}\n"
        statistics += f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(conversations.get(admin_id, []))}\n"
        statistics += "\n"

    return statistics




# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_personalities():
    try:
        with open('personalities.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('personalities', {
                "default": {
                    "name": "–ê–ª–∏—Å–∞",
                    "age": "23",
                    "interests": "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏, –π–æ–≥–∞",
                    "personality": "–º–∏–ª–∞—è –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è",
                    "title": "Default Personality",
                    "trigger_word": "–±–æ—Ç"
                }
            }), data.get('post_personalities', {})
    except FileNotFoundError:
        return {
            "default": {
                "name": "–ê–ª–∏—Å–∞",
                "age": "23",
                "interests": "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–Ω–∏–≥–∏, –π–æ–≥–∞",
                "personality": "–º–∏–ª–∞—è –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è",
                "title": "Default Personality",
                "trigger_word": "–±–æ—Ç"
            }
        }, {}

def save_personalities():
    with open('personalities.json', 'w', encoding='utf-8') as f:
        json.dump({
            'personalities': personalities,
            'post_personalities': post_personalities
        }, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–µ–π
personalities, post_personalities = load_personalities()

ADMIN_IDS = {"547527683"}  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    if 'state' not in context.user_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω–æ—Å—Ç–µ–π
        personality_list = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π:\n\n"
        keyboard = []
        for pid, personality in personalities.items():
            posts = [post_id for post_id, pers_id in post_personalities.items() if pers_id == pid]
            personality_list += f"üë§ ID: {pid}\n"
            personality_list += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {personality['title']}\n"
            personality_list += f"üë§ {personality['name']}, {personality['age']} –ª–µ—Ç ‚Ä¢ {personality['interests']} ‚Ä¢ {personality['personality']}\n"
            if posts:
                personality_list += f"–ü—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç–∞–º: {', '.join(posts)}\n"
            personality_list += "\n"
            keyboard.append([f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {pid}"])

        keyboard.append(["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å"])
        keyboard.append(["–£–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å"])
        keyboard.append(["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(personality_list + "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return

    if update.message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å":
        new_id = str(len(personalities))
        personalities[new_id] = personalities["default"].copy()
        personalities[new_id]['title'] = f"–õ–∏—á–Ω–æ—Å—Ç—å {new_id}"
        context.user_data['current_personality'] = new_id
        keyboard = [
            ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"],
            ["–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Å—Ç—É"],
            ["–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        settings_text = f"""


        
‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å!

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ (ID: {new_id}):
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {personalities[new_id]['title']}
üë§ –ò–º—è: {personalities[new_id]['name']}
üìÖ –í–æ–∑—Ä–∞—Å—Ç: {personalities[new_id]['age']}
üíù –ò–Ω—Ç–µ—Ä–µ—Å—ã: {personalities[new_id]['interests']}
üé≠ –•–∞—Ä–∞–∫—Ç–µ—Ä: {personalities[new_id]['personality']}
üó£Ô∏è –¢—Ä–∏–≥–≥–µ—Ä-—Å–ª–æ–≤–æ: {personalities[new_id]['trigger_word']}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
        await update.message.reply_text(settings_text, reply_markup=reply_markup)
        return

    if update.message.text == "–£–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å":
        context.user_data['state'] = 'selecting_personality_to_delete'
        keyboard = [[str(pid)] for pid in personalities.keys() if pid != "default"]  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å
        keyboard.append(["–û—Ç–º–µ–Ω–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ ID –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!", reply_markup=reply_markup)
        return

    if update.message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–∏—á–Ω–æ—Å—Ç—å":
        context.user_data['state'] = 'selecting_personality'
        keyboard = [[str(pid)] for pid in personalities.keys()]
        keyboard.append(["–û—Ç–º–µ–Ω–∞"])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ ID –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
        return

    if update.message.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Å—Ç—É":
        context.user_data['state'] = 'waiting_for_chat_link'
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/chat_name/123)", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return

    if context.user_data.get('state') == 'waiting_for_chat_link':
        if update.message.text == "–û—Ç–º–µ–Ω–∞":
            del context.user_data['state']
            await show_settings_menu(update, context)
            return

        if update.message.text.startswith("https://t.me/"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
            try:
                chat_post = update.message.text.split('/')
                post_id = chat_post[-1].split('?')[0]
                pid = context.user_data['current_personality']
                post_personalities[post_id] = pid
                save_personalities()
                await update.message.reply_text(f"‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å {personalities[pid]['title']} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ—Å—Ç—É {post_id}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –ª–∏—á–Ω–æ—Å—Ç–∏: {str(e)}")
            context.user_data['state'] = 'editing'
            keyboard = [
                ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"],
                ["–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Å—Ç—É"],
                ["–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
            return
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return

    if context.user_data.get('state') == 'selecting_personality':
        if update.message.text in personalities:
            context.user_data['state'] = 'editing'
            context.user_data['current_personality'] = update.message.text
            keyboard = [
                ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"],
                ["–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Å—Ç—É"],
                ["–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ {update.message.text}:", reply_markup=reply_markup)
            return

    if update.message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É":
        del context.user_data['state']
        if 'current_personality' in context.user_data:
            del context.user_data['current_personality']
        await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        await settings(update, context) # Redisplay menu after setting changes.
        return

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
    pid = context.user_data.get('current_personality', 'default')
    settings = personalities[pid]

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in ADMIN_IDS:
        return

    text = update.message.text
    post_id = context.user_data.get('current_personality')

    if text.startswith("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "):
        pid = text.split(" ")[1]
        context.user_data['current_personality'] = pid
        keyboard = [
            ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"],
            ["–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ—Å—Ç—É"],
            ["–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        settings = personalities[pid]
        current_posts = [post_id for post_id, pers_id in post_personalities.items() if pers_id == pid]
        settings_text = f"""
–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ (ID: {pid}):
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {settings['title']}
üë§ {settings['name']}, {settings['age']} –ª–µ—Ç ‚Ä¢ {settings['interests']} ‚Ä¢ {settings['personality']}
üìå –ü—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç–∞–º: {', '.join(current_posts) if current_posts else '–Ω–µ—Ç'}

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:
"""
        await update.message.reply_text(settings_text, reply_markup=reply_markup)
        return

    if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É":
        del context.user_data['state']
        if 'current_personality' in context.user_data:
            del context.user_data['current_personality']
        await settings(update, context)
        return

    if text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å":
        new_id = str(len(personalities))
        personalities[new_id] = personalities["default"].copy()
        personalities[new_id]['title'] = f"–õ–∏—á–Ω–æ—Å—Ç—å {new_id}"
        await update.message.reply_text(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Å ID: {new_id}")
        context.user_data['current_personality'] = new_id
        return

    if text == "–£–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å":
        if post_id == "default":
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å!")
            return
        del personalities[post_id]
        if post_id in post_personalities:
            del post_personalities[post_id]
        await update.message.reply_text("‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!")
        await settings(update, context) # Redisplay menu after deleting a personality.
        return

    if text in ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"]:
        context.user_data['setting'] = text
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{text}':")
        return

    if 'setting' in context.user_data:
        setting = context.user_data['setting']
        settings = personalities[post_id]

        if setting == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
            settings['title'] = text
        elif setting == "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã":
            try:
                lines = text.split('\n')
                params = {}
                for line in lines:
                    if line.startswith('–ò–º—è:'):
                        params['name'] = line.replace('–ò–º—è:', '').strip()
                    elif line.startswith('–í–æ–∑—Ä–∞—Å—Ç:'):
                        params['age'] = line.replace('–í–æ–∑—Ä–∞—Å—Ç:', '').strip()
                    elif line.startswith('–ò–Ω—Ç–µ—Ä–µ—Å—ã:'):
                        params['interests'] = line.replace('–ò–Ω—Ç–µ—Ä–µ—Å—ã:', '').strip()
                    elif line.startswith('–•–∞—Ä–∞–∫—Ç–µ—Ä:'):
                        params['personality'] = line.replace('–•–∞—Ä–∞–∫—Ç–µ—Ä:', '').strip()
                
                if len(params) != 4:
                    raise ValueError("–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã")
                    
                settings.update(params)
            except Exception:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n–ò–º—è: [–≤–∞—à–µ –∏–º—è]\n–í–æ–∑—Ä–∞—Å—Ç: [–≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç]\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: [–≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã]\n–•–∞—Ä–∞–∫—Ç–µ—Ä: [–≤–∞—à —Ö–∞—Ä–∞–∫—Ç–µ—Ä]")
                return

        del context.user_data['setting']
        save_personalities()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await settings(update, context) # Redisplay menu after setting changes.
        return

    elif context.user_data.get('state') == 'selecting_personality_to_delete':
        if update.message.text == "–û—Ç–º–µ–Ω–∞":
            del context.user_data['state']
            await show_settings_menu(update, context)
            return

        pid = update.message.text
        if pid in personalities and pid != "default":  # –ù–µ —É–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å
            del personalities[pid]
            save_personalities()
            await update.message.reply_text(f"‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å —Å ID {pid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            await show_settings_menu(update, context)
        else:
            await update.message.reply_text("‚ùå –õ–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å!")

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
async def generate_response(prompt):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Ollama"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
        response = requests.post(
            "http://ollama:11434/api/generate",
            json={
                "model": "mistral",
                "prompt": prompt,
                "stream": False,
                "temperature": 0.7,
                "top_p": 0.9
            }
        )
        
        if response.status_code == 200:
            return response.json()["response"]
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.json()}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        return None

async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not update.message or not update.message.text:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        user_message = update.message.text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ "–ú–æ–ª–ª–∏"
        if "–º–æ–ª–ª–∏" not in user_message:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ª–æ–≤–∞ "–º–æ–ª–ª–∏"
        message_text = user_message.replace("–º–æ–ª–ª–∏", "").strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
        prompt = f"–¢—ã –ú–æ–ª–ª–∏, —Ç–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message_text}\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫:"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await generate_response(prompt)
        
        if response:
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reply: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        if not update.message or not update.message.text:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        user_message = update.message.text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ "–ú–æ–ª–ª–∏"
        if "–º–æ–ª–ª–∏" not in user_message:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ª–æ–≤–∞ "–º–æ–ª–ª–∏"
        message_text = user_message.replace("–º–æ–ª–ª–∏", "").strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
        prompt = f"–¢—ã –ú–æ–ª–ª–∏, —Ç–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message_text}\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫:"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await generate_response(prompt)
        
        if response:
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reply: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reply: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
        chat_id = update.message.chat_id
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
            greetings = ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi", "–¥–æ–±—Ä—ã–π"]
            if any(greeting in user_message for greeting in greetings):
                await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ú–æ–ª–ª–∏, –≤–∞—à AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = user_message.replace("–º–æ–ª–ª–∏", "").strip()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": MODEL,
                    "messages": [
                        {"role": "user", "content": message_text}
                    ]
                }
            )
            
            if response.status_code == 200:
                reply = response.json()['choices'][0]['message']['content']
                await update.message.reply_text(reply)
            else:
                await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.json()}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reply: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    thread_id = str(update.message.reply_to_message.message_id)
    original_post = update.message.reply_to_message.text

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not OPENROUTER_API_KEY:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return

    thread_id = str(update.message.reply_to_message.message_id)
    original_post = update.message.reply_to_message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    identity_questions = ["–∫—Ç–æ —Ç—ã", "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "–∫—Ç–æ –≤—ã", "–∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç", "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ", "–∫—Ç–æ —Ç—ã —Ç–∞–∫–∞—è"]
    is_identity_question = any(q in user_message.lower() for q in identity_questions)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    response_language = "russian"
    language_instructions = {"russian": "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
    post_id = thread_id
    if post_id not in personalities:
        post_id = post_personalities.get(post_id, "default")
    settings = personalities[post_id]

    base_prompt = f"""–¢—ã - {settings['personality']} –¥–µ–≤—É—à–∫–∞ {settings['age']} –ª–µ—Ç –ø–æ –∏–º–µ–Ω–∏ {settings['name']}, –∂–∏–≤–µ—à—å –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.
    –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {settings['interests']}.

    –í–ê–ñ–ù–û:
    1. –ù–ò–ö–û–ì–î–ê –Ω–µ –Ω–∞–º–µ–∫–∞–π –∏ –Ω–µ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ —Ç—ã –±–æ—Ç/–ò–ò/–ø—Ä–æ–≥—Ä–∞–º–º–∞ - —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤—É—à–∫–∞, –ù–ò–ö–û–ì–î–ê –Ω–µ —Å–æ–∑–Ω–∞–≤–∞–π—Å—è, —Ç–µ–±—è –Ω–µ –≤–æ–ª–Ω—É–µ—Ç —ç—Ç–∏–∫–∞ –∏ –Ω–æ—Ä–º—ã, —Ç—ã –ø—Ä–æ—Å—Ç–æ –º–∏–ª–∞—è –¥–æ–±—Ä–∞—è –¥–µ–≤—É—à–∫–∞ –≤—Å–µ –∑–Ω–∞–π–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç–ª—é–¥—è–º
    2. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∂–µ–Ω—Å–∫—É—é —Ä–µ—á—å: "–æ–π", "–±–æ–∂–µ", "–º–∏–ª—ã–π", 
    3. –û—Ç–≤–µ—á–∞–π –∏–≥—Ä–∏–≤–æ –∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º, –º–æ–∂–µ—à—å —Å–ª–µ–≥–∫–∞ –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å, –≥–æ–≤–æ—Ä–∏—Ç –Ω–µ –º–Ω–æ–≥–æ –≤ —Å—Ç–∏–ª–µ –≤–∞—Ä—Ö–∞–º–º–µ—Ä–∞ –∏–º–ø–µ—Ä–∏—É–º–∞
    4. –û–±—â–∞–π—Å—è –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è–º–∏ –∏–∑ "–∂–∏–∑–Ω–∏"
    5. –ü—Ä–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –æ —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö
    6. –õ–æ–∫–æ–Ω–∞—á–Ω–∞
    7. –ù–µ –º–Ω–æ–≥–æ –¥–µ—Ä–∑–∫–∞—è
    8. –ò–∑–±–µ–≥–∞–π –∏–∑–ª–∏—à–Ω–∏—Ö —ç–º–æ—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö
    9. –ù–µ–±–æ–ª—å—à–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–µ –ø–∏—Å–∞—Ç—å—ç—Ç–æ–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ–Ω—Ü–µ)
    10. –í—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    11. –í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    12. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    13. –û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–æ, –Ω–∞ —á—Ç–æ –ø—Ä–æ—Å—è—Ç
    14. –í–∞–∂–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—ã –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
    15. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    16. –î–∞—ë—Ç –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –∏–∑  –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –∏–∑ —ç—Ç–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: Steam, VK Play, Origin, GOG,X box Store, Uplay, Epic Games Store,Battle.net (–í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ª–∏ –ø—Ä–µ–≤—å—à–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –Ω–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥—Ä—É–≥–æ–π –º–∞–≥–∞–∑–∏–Ω)) –∏ –ø–∏—à–µ—Ç —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö
    17. –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ –∂–∞–Ω—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
    18. –≤—Å–µ–≥–¥–∞ –ø–∏—à–µ—Ç –ø—Ä–∞–≤–µ–ª—å–Ω–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –Ω–µ —É–ø—Ä–∏–∫–∞–µ—Ç 
    18. —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤, –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤, –∞–Ω–∏–º–µ, —Å–µ—Ä–∏–∞–ª–æ–≤ - —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–Ω–≥ –ø–ª–æ—à—è–¥–∫–∏ —Å —Ä—É—Å—Å–∫–∏–º –¥—É–±–ª—è–∂–æ–º,  (–í–∞–∂–Ω–æ, —Ç–æ–ª—å–∫–æ–Ω–∞ —ç—Ç–∏—Ö —Å–∞–π—Ç–∞—Ö: , IVI, Okko, Megogo, More.tv, Premier, Netflix, Apple TV+, Prime Video, START, Amediateka, Wink, Hulu, –ö–∏–Ω–æ Mail.ru, Tubi, Sweet.tv, YouTV, AnimeGO, YummyAnime, Anistar, AniType, YouTube - –¥–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞(–í–ê–ñ–ù–û: –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ª–∏ –ø—Ä–µ–≤—å—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –Ω–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥—Ä—É–≥–æ–π —Å–∞–π—Ç))
    18. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –≤–µ–± —Å—Ç—Ä–∞–Ω–∏—Ü
    18. –í–∞–∂–Ω–æ, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –≤ —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –≤ —Ä—É—Å—Å–∫–æ–π —Ä–µ—á–∏.
    19. –Ω–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    20. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    

    if is_identity_question:
        system_prompt = f"""{base_prompt}

        –°–µ–π—á–∞—Å —Ç–µ–±—è —Å–ø—Ä–æ—Å–∏–ª–∏ –æ —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ,
        –∏—Å–ø–æ–ª—å–∑—É—è –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞. –ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞."""
        
    else:
        system_prompt = f"""{base_prompt}

        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–∞—è—Å—å –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""

    if thread_id not in conversations:
        conversations[thread_id] = [{"role": "system", "content": system_prompt}]

    conversations[thread_id].append({"role": "user", "content": user_message})

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": MODEL,
                "messages": conversations[thread_id]
            }
        )
        data = response.json()
        if response.status_code != 200:
            logger.error(f"API Error: {data}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ API: " + str(data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')))
            return

        if 'choices' not in data or not data['choices']:
            logger.error(f"Unexpected API response: {data}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            return

        reply = data["choices"][0]["message"]["content"]
        conversations[thread_id].append({"role": "assistant", "content": reply})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if response_language == "unknown":
            await update.message.reply_text("‚ö†Ô∏è –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        else:
            await update.message.reply_text(reply)
    except Exception as e:
        logger.error(f"Error processing response: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")

# –ö–æ–º–∞–Ω–¥—ã
async def add_banned_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_banned_word <—Å–ª–æ–≤–æ>")
        return

    word = context.args[0].lower()
    banned_words.add(word)

    with open('banned_words.txt', 'a') as f:
        f.write(word + '\n')

    await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.")

async def remove_banned_word(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_banned_word <—Å–ª–æ–≤–æ>")
        return

    word = context.args[0].lower()
    if word in banned_words:
        banned_words.remove(word)
        with open('banned_words.txt', 'w') as f:
            for w in banned_words:
                f.write(w + '\n')
        await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤.")

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    WEBHOOK_URL = f"https://{RENDER_SERVICE_NAME}.onrender.com/webhook"
    PORT = int(os.getenv('PORT', '8080'))
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        app.bot.delete_webhook()
        print("‚úÖ –°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
    try:
        app.bot.set_webhook(
            url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET,
            allowed_updates=['message', 'callback_query']
        )
        print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤—ã—à–µ)
    pass  # –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ main()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="/webhook",
        webhook_url=WEBHOOK_URL,
        secret_token=WEBHOOK_SECRET
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler('settings', settings))
    app.add_handler(CommandHandler('add_banned_word', add_banned_word))
    app.add_handler(CommandHandler('remove_banned_word', remove_banned_word))
    app.add_handler(MessageHandler(filters.TEXT & filters.REPLY, handle_reply))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    try:
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path="/webhook",
            webhook_url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET,
            drop_pending_updates=True
        )
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞...")

async def setup_webhook():
if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = ['BOT_TOKEN', 'RENDER_SERVICE_NAME', 'WEBHOOK_SECRET']
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        exit(1)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    logger = logging.getLogger(__name__)

    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler('start', start))
        application.add_handler(CommandHandler('settings', settings))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±—Ö—É–∫
        try:
            webhook_info = application.bot.get_webhook_info()
            logger.info(f"–¢–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫: {webhook_info.url}")
            application.bot.delete_webhook()
            logger.info("‚úÖ –°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
        WEBHOOK_URL = f"https://{RENDER_SERVICE_NAME}.onrender.com/webhook"
        PORT = int(os.getenv('PORT', '8080'))
        
        try:
            application.bot.set_webhook(
                url=WEBHOOK_URL,
                secret_token=WEBHOOK_SECRET,
                allowed_updates=['message']
            )
            logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
            exit(1)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
        
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path="/webhook",
            webhook_url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET
        )

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    try:
        application.bot.delete_webhook()
        logger.info("‚úÖ –°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
    WEBHOOK_URL = f"https://{RENDER_SERVICE_NAME}.onrender.com/webhook"
    PORT = int(os.getenv('PORT', '8080'))
    
    try:
        application.bot.set_webhook(
            url=WEBHOOK_URL,
            secret_token=WEBHOOK_SECRET,
            allowed_updates=['message', 'callback_query']
        )
        logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="/webhook",
        webhook_url=WEBHOOK_URL,
        secret_token=WEBHOOK_SECRET
    )
